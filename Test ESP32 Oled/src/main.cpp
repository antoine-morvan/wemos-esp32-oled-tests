/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
 * Copyright (c) 2018 by Fabrice Weinberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ThingPulse invests considerable time and money to develop these open source libraries.
 * Please support us by buying our products (and not the clones) from
 * https://thingpulse.com
 *
 */
#include "Arduino.h"

 // Include the correct display library
 // For a connection via I2C using Wire include
 #include <Wire.h>  // Only needed for Arduino 1.6.5 and earlier
 #include "SSD1306.h" // alias for `#include "SSD1306Wire.h"`
 // or #include "SH1106.h" alis for `#include "SH1106Wire.h"`
 // For a connection via I2C using brzo_i2c (must be installed) include
 // #include <brzo_i2c.h> // Only needed for Arduino 1.6.5 and earlier
 // #include "SSD1306Brzo.h"
 // #include "SH1106Brzo.h"
 // For a connection via SPI include
 // #include <SPI.h> // Only needed for Arduino 1.6.5 and earlier
 // #include "SSD1306Spi.h"
 // #include "SH1106SPi.h"

// Include the UI lib
#include "OLEDDisplayUi.h"

// Include custom images
#define cones_311498_640_width 114
#define cones_311498_640_height 64
static unsigned char cones_311498_640_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00,
   0x04, 0x89, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x08, 0x06, 0x00, 0x0b, 0x4b, 0x03, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x08, 0x08, 0x80, 0x08, 0x49, 0x04, 0x40, 0x40, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x60, 0x06, 0x91, 0x19,
   0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00,
   0x81, 0x14, 0x02, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e,
   0xf8, 0x07, 0xd8, 0x60, 0x12, 0x6c, 0x80, 0x7f, 0xc8, 0x01, 0x00, 0x00,
   0x00, 0xe0, 0x18, 0x0c, 0x30, 0x63, 0xf8, 0x02, 0x00, 0x33, 0xc0, 0x60,
   0x1c, 0x00, 0x00, 0x00, 0x10, 0x04, 0x04, 0xe0, 0x08, 0x80, 0x02, 0x5e,
   0x1c, 0x80, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x20, 0x18,
   0xf8, 0xc3, 0x40, 0x10, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x03,
   0x00, 0x20, 0x1c, 0x0c, 0x2e, 0xc0, 0x10, 0x00, 0x00, 0xf3, 0x00, 0x00,
   0x00, 0x83, 0x01, 0x04, 0x60, 0x1a, 0x02, 0x1c, 0x50, 0x19, 0x80, 0x00,
   0x06, 0x03, 0x00, 0x80, 0x80, 0x00, 0x04, 0x60, 0x12, 0x01, 0x38, 0xb0,
   0x19, 0x80, 0x00, 0x04, 0x04, 0x00, 0x40, 0x40, 0x00, 0x04, 0xa0, 0xa1,
   0x00, 0x20, 0x10, 0x17, 0x80, 0x00, 0x08, 0x08, 0x00, 0x20, 0x60, 0x00,
   0x08, 0xa0, 0xbc, 0x00, 0x40, 0xf8, 0x14, 0x40, 0x00, 0x18, 0x10, 0x00,
   0x20, 0x00, 0x00, 0x10, 0x80, 0x88, 0x00, 0x40, 0x10, 0x04, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x30, 0x40, 0x8c, 0x00, 0x20, 0x08,
   0x08, 0x30, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0xc0, 0x61, 0x8a,
   0x00, 0x00, 0x08, 0x18, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x20, 0x10, 0x00,
   0x60, 0x1e, 0x09, 0x03, 0x18, 0x04, 0xe0, 0x19, 0x00, 0x20, 0x10, 0x00,
   0x40, 0x30, 0x00, 0x00, 0x84, 0x05, 0x06, 0x06, 0x04, 0x80, 0x20, 0x00,
   0x30, 0x08, 0x00, 0x60, 0x60, 0x00, 0x18, 0x84, 0x04, 0x98, 0x63, 0x04,
   0x80, 0x40, 0x00, 0x18, 0x18, 0x00, 0xb0, 0xa0, 0x87, 0x0f, 0x88, 0x02,
   0x60, 0xc2, 0x05, 0x40, 0xc0, 0x87, 0x17, 0x34, 0x00, 0x10, 0x13, 0x78,
   0x08, 0x48, 0x02, 0x00, 0x01, 0x0e, 0x40, 0x40, 0x78, 0x20, 0x23, 0x00,
   0x00, 0x00, 0x00, 0x04, 0x30, 0x02, 0x00, 0x01, 0x08, 0x20, 0x80, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x02, 0x80, 0x01, 0x10,
   0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x02, 0x20, 0x03,
   0x80, 0x01, 0x10, 0x10, 0x00, 0x01, 0x40, 0x40, 0x00, 0x08, 0x08, 0x00,
   0x02, 0xa0, 0x04, 0x40, 0x02, 0xe0, 0x1f, 0x00, 0x01, 0x40, 0x40, 0x00,
   0x08, 0x08, 0x00, 0x02, 0x60, 0x04, 0x40, 0x02, 0x00, 0x0a, 0x00, 0x01,
   0x40, 0x40, 0x00, 0x08, 0x08, 0x00, 0x02, 0x20, 0x04, 0x20, 0x02, 0x00,
   0x0a, 0x00, 0x01, 0x40, 0x40, 0x00, 0x04, 0x08, 0x00, 0x02, 0x00, 0x04,
   0x00, 0x04, 0x00, 0x1a, 0x00, 0x01, 0x40, 0x80, 0x00, 0x14, 0x08, 0x00,
   0x02, 0x10, 0x02, 0x10, 0x04, 0x00, 0x12, 0x00, 0x01, 0x40, 0xa0, 0x00,
   0x62, 0x00, 0x00, 0x02, 0x10, 0x04, 0x06, 0x10, 0x20, 0x22, 0x00, 0x01,
   0x00, 0x18, 0x01, 0x89, 0x11, 0x00, 0x02, 0x18, 0xcc, 0x01, 0x00, 0x50,
   0x62, 0x00, 0x01, 0x20, 0x46, 0x02, 0x09, 0x3e, 0x00, 0x02, 0x16, 0x20,
   0x00, 0x20, 0x98, 0xa4, 0x01, 0x01, 0xf0, 0x41, 0x02, 0x09, 0x60, 0x00,
   0xfe, 0x11, 0x40, 0x00, 0x60, 0x0c, 0x27, 0xfe, 0x01, 0x18, 0x40, 0x02,
   0x05, 0xd0, 0x00, 0x01, 0x10, 0x40, 0x00, 0xc0, 0x06, 0x2c, 0x00, 0x02,
   0x2c, 0x80, 0x02, 0x07, 0x10, 0x83, 0x01, 0x30, 0x40, 0x00, 0x80, 0x01,
   0x38, 0x00, 0x06, 0x23, 0x80, 0x03, 0x04, 0x00, 0xfc, 0x00, 0x50, 0x40,
   0x00, 0x80, 0x00, 0x28, 0x00, 0xfc, 0x00, 0x80, 0x00, 0x00, 0x08, 0x84,
   0x00, 0x90, 0xbf, 0x00, 0x00, 0x01, 0x28, 0x00, 0x84, 0x40, 0x00, 0x00,
   0x04, 0x04, 0x48, 0x00, 0x08, 0x80, 0x00, 0x80, 0x01, 0x44, 0x00, 0x48,
   0x80, 0x80, 0x00, 0x04, 0x04, 0x48, 0x00, 0x08, 0x01, 0x01, 0x40, 0x01,
   0x44, 0x00, 0x48, 0x80, 0x80, 0x00, 0x04, 0x02, 0x68, 0x00, 0x04, 0x01,
   0x03, 0x60, 0x02, 0x82, 0x00, 0x58, 0x00, 0x81, 0x00, 0x0c, 0x03, 0x70,
   0x00, 0x02, 0x01, 0x06, 0x20, 0x02, 0x03, 0x01, 0x38, 0x00, 0xc3, 0x00,
   0xc8, 0x03, 0x70, 0x80, 0x01, 0x02, 0x18, 0x1e, 0x06, 0x01, 0x06, 0x38,
   0x00, 0x4f, 0x00, 0x70, 0x02, 0x90, 0x60, 0x00, 0x02, 0xe0, 0x21, 0x8c,
   0x00, 0x18, 0x24, 0x00, 0x39, 0x00, 0x20, 0x02, 0x08, 0x1f, 0x00, 0x04,
   0x10, 0x40, 0xfa, 0x00, 0xe0, 0x43, 0x00, 0x01, 0x00, 0x20, 0x02, 0x0c,
   0x02, 0x00, 0x18, 0x98, 0x80, 0x89, 0x00, 0x00, 0xc1, 0x00, 0x11, 0x00,
   0x80, 0xff, 0x01, 0x01, 0x00, 0x28, 0x80, 0x00, 0x80, 0x00, 0x00, 0x02,
   0xfe, 0x07, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x28, 0x80, 0x00, 0x84,
   0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x28,
   0x00, 0x00, 0x84, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x50, 0x00, 0x01, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x01, 0x26, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x02,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
   0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x78, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x38, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

#define WiFi_Logo_width 60
#define WiFi_Logo_height 36
const uint8_t WiFi_Logo_bits[] PROGMEM = {
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
  0xFF, 0x03, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0x83, 0x01, 0x80, 0xFF, 0xFF, 0xFF,
  0x01, 0x00, 0x07, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00,
  0xC0, 0xFF, 0xFF, 0x7C, 0x00, 0x60, 0x0C, 0x00, 0xC0, 0x31, 0x46, 0x7C,
  0xFC, 0x77, 0x08, 0x00, 0xE0, 0x23, 0xC6, 0x3C, 0xFC, 0x67, 0x18, 0x00,
  0xE0, 0x23, 0xE4, 0x3F, 0x1C, 0x00, 0x18, 0x00, 0xE0, 0x23, 0x60, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xE0, 0x03, 0x60, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x07, 0x60, 0x3C, 0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C,
  0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00, 0xE0, 0x8F, 0x71, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x08, 0x00,
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x0C, 0x00, 0x80, 0xFF, 0xFF, 0x1F,
  0x00, 0x00, 0x06, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x07, 0x00,
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  };

const uint8_t activeSymbol[] PROGMEM = {
    B00000000,
    B00000000,
    B00011000,
    B00100100,
    B01000010,
    B01000010,
    B00100100,
    B00011000
};

const uint8_t inactiveSymbol[] PROGMEM = {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00011000,
    B00011000,
    B00000000,
    B00000000
};

// Use the corresponding display class:

// Initialize the OLED display using SPI
// D5 -> CLK
// D7 -> MOSI (DOUT)
// D0 -> RES
// D2 -> DC
// D8 -> CS
// SSD1306Spi        display(D0, D2, D8);
// or
// SH1106Spi         display(D0, D2);

// Initialize the OLED display using brzo_i2c
// D3 -> SDA
// D5 -> SCL
// SSD1306Brzo display(0x3c, D3, D5);
// or
// SH1106Brzo  display(0x3c, D3, D5);

// Initialize the OLED display using Wire library
SSD1306  display(0x3c, 5, 4);
// SH1106 display(0x3c, D3, D5);

OLEDDisplayUi ui     ( &display );

void msOverlay(OLEDDisplay *display, OLEDDisplayUiState* state) {
  display->setTextAlignment(TEXT_ALIGN_RIGHT);
  display->setFont(ArialMT_Plain_10);
  unsigned long runTimeMs = millis();
  unsigned long runTimeS = runTimeMs / 1000;
  display->drawString(128, 0, String(runTimeS));
}

void drawFrame1(OLEDDisplay *display, OLEDDisplayUiState* state, int16_t x, int16_t y) {
  // draw an xbm image.
  // Please note that everything that should be transitioned
  // needs to be drawn relative to x and y

  //display->drawXbm(x + 34, y + 14, WiFi_Logo_width, WiFi_Logo_height, WiFi_Logo_bits);

  display->drawXbm(x + 7, y , cones_311498_640_width, cones_311498_640_height, cones_311498_640_bits);
}


// This array keeps function pointers to all frames
// frames are the single views that slide in
FrameCallback frames[] = { drawFrame1 };

// how many frames are there?
int frameCount = 1;

// Overlays are statically drawn on top of a frame eg. a clock
OverlayCallback overlays[] = { msOverlay };
int overlaysCount = 1;

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.println();

	// The ESP is capable of rendering 60fps in 80Mhz mode
	// but that won't give you much time for anything else
	// run it in 160Mhz mode or just set it to 30 fps
  ui.setTargetFPS(60);

	// Customize the active and inactive symbol
  ui.setActiveSymbol(activeSymbol);
  ui.setInactiveSymbol(inactiveSymbol);

  // You can change this to
  // TOP, LEFT, BOTTOM, RIGHT
  ui.setIndicatorPosition(BOTTOM);

  // Defines where the first frame is located in the bar.
  ui.setIndicatorDirection(LEFT_RIGHT);
  ui.disableAutoTransition();
  // You can change the transition that is used
  // SLIDE_LEFT, SLIDE_RIGHT, SLIDE_UP, SLIDE_DOWN
  ui.setFrameAnimation(SLIDE_LEFT);

  // Add frames
  ui.setFrames(frames, frameCount);

  // Add overlays
  ui.setOverlays(overlays, overlaysCount);
  ui.setTimePerFrame(3000);
  ui.setTimePerTransition(500);


  // Initialising the UI will init the display too.
  ui.init();

  display.flipScreenVertically();

}

int currentAnimation = 0;
unsigned long lastruntimems = 0;
void loop() {
  unsigned long runTimeMs = millis();
  if (runTimeMs > lastruntimems+2000) {
    lastruntimems = runTimeMs;
    currentAnimation = (currentAnimation + 1)%4;
    ui.setFrameAnimation(static_cast<AnimationDirection>(currentAnimation));
    ui.nextFrame();
  }

  int remainingTimeBudget = ui.update();
  
  if (remainingTimeBudget > 0) {
    // You can do some work here
    // Don't do stuff if you are below your
    // time budget.
    delay(remainingTimeBudget);
  }
}